{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PYDAQ documentation Introduction This site presents the full documentation of PYDAQ - Data Acquisition and Experimental Analysis with Python. Here the user can find examples of how to use it for data acquisition and generating signals using NIDAQ and Arduino boards. Also, step-response experiments can be easily performed, as showed up in Step response (NIDAQ) and Step response (Arduino) . Furthermore, this tool can be used to apply any generic output in an experimental tool, such as PRBS (Pseudo Random Binary Signal) or other persistently exciting signal, in order to generate data for black box system identification. The user is able to get/send data either using a command line method of a GUI (Graphical User Interface), speeding up prototypes and quick experiments, keeping the user confidence in the acquired/sent data. Besides, the command line interface allows one to keep developing new features while data are acquired. Installation and Requirements The fastest way to install PYDAQ is using pip: pip install pydaq PYDAQ requires: Installed driver of the board used (Arduino or National Instruments NIDAQ) nidaqmx (>=0.6.5) for data acquisition from National Instruments Boards matplotlib (>=3.5.3) as a visualization tool numpy (>=1.22.3) to process data PySimpleGUI (>=4.60.3) as a Graphical User Interface PyQt5 as a backend for PySimpleGui pyserial (>=3.5) to manage data to/from Arduino Documentation Map Data Acquisition Here the user will find examples of how to use GUI (Graphical User Interface) and also commando line to acquire data using NIDAQ or Arduino boards. Sending data In this Section is presented how the user can send data from NIDAQ or Arduino , by mean of command line or a GUI (Graphical User Interface.) Step response Here the user will find examples of how to define parameters to perform a step response experiments with available boards ( NIDAQ / Arduino ). Examples In this section it will be provided Jupyter Notebook examples presenting code functionalities ( NIDAQ / Arduino )","title":"Home"},{"location":"#welcome-to-pydaq-documentation","text":"","title":"Welcome to PYDAQ documentation"},{"location":"#introduction","text":"This site presents the full documentation of PYDAQ - Data Acquisition and Experimental Analysis with Python. Here the user can find examples of how to use it for data acquisition and generating signals using NIDAQ and Arduino boards. Also, step-response experiments can be easily performed, as showed up in Step response (NIDAQ) and Step response (Arduino) . Furthermore, this tool can be used to apply any generic output in an experimental tool, such as PRBS (Pseudo Random Binary Signal) or other persistently exciting signal, in order to generate data for black box system identification. The user is able to get/send data either using a command line method of a GUI (Graphical User Interface), speeding up prototypes and quick experiments, keeping the user confidence in the acquired/sent data. Besides, the command line interface allows one to keep developing new features while data are acquired.","title":"Introduction"},{"location":"#installation-and-requirements","text":"The fastest way to install PYDAQ is using pip: pip install pydaq PYDAQ requires: Installed driver of the board used (Arduino or National Instruments NIDAQ) nidaqmx (>=0.6.5) for data acquisition from National Instruments Boards matplotlib (>=3.5.3) as a visualization tool numpy (>=1.22.3) to process data PySimpleGUI (>=4.60.3) as a Graphical User Interface PyQt5 as a backend for PySimpleGui pyserial (>=3.5) to manage data to/from Arduino","title":"Installation and Requirements"},{"location":"#documentation-map","text":"","title":"Documentation Map"},{"location":"#data-acquisition","text":"Here the user will find examples of how to use GUI (Graphical User Interface) and also commando line to acquire data using NIDAQ or Arduino boards.","title":"Data Acquisition"},{"location":"#sending-data","text":"In this Section is presented how the user can send data from NIDAQ or Arduino , by mean of command line or a GUI (Graphical User Interface.)","title":"Sending data"},{"location":"#step-response","text":"Here the user will find examples of how to define parameters to perform a step response experiments with available boards ( NIDAQ / Arduino ).","title":"Step response"},{"location":"#examples","text":"In this section it will be provided Jupyter Notebook examples presenting code functionalities ( NIDAQ / Arduino )","title":"Examples"},{"location":"get_data_arduino/","text":"Data Acquisition with Arduino NOTE 1 : before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device NOTE 2 To acquire/send data with arduino, the code provided here (located at arduino_code ) should be uploaded in Arduino first. Default input port is A0 and this port can be changed in the above mentioned code. NOTE 3 PYDAQ is programmed to use 10 bits as a ADC resolution, and 0V and 5V as the input range. To change this, the user can alter the following variables: self.arduino_ai_bits = 10 self.ard_ai_max = 5 self.ard_ai_min = 0 Data Acquitition using Graphical User Interface (GUI) Using GUI to acquire data is really straighforward and require only three LOC (lines of code): from pydaq.get_data import Get_data # Class Get_data g = Get_data() # Method get_data_arduino g.get_data_arduino_gui() After this command, the following screen will show up, where the user is able to define parameters and start to acquire data. The user is now able to select desired device, sample period and session duration. Also, the user will define if the data will or not be plotted and saved, as well as the path to save data. Data Acquitition using command line It will be presented how to use Get_data (and get_data_arduino) to acquire signal using an Arduino board. Firstly, import library and define parameters: # Importing PYDAQ from pydaq.get_data import Get_data # Defining parameters sample_period_in_seconds = 1 session_duration_in_seconds = 10.0 com_port_arduino = 'COM3' save_data = True will_plot = True Then, instantiate a class with defined parametes and get the data # Class Get_data g = Get_data(com=com_port_arduino, ts=sample_period_in_seconds, session_duration=session_duration_in_seconds, save=save_data, plot=will_plot) # Method get_data_arduino g.get_data_arduino() NOTE : data will be saved on desktop, by default. To change the path the user can define \"g.path = Desired path\" Presenting acquired data To show acquired data, type: print(f'First 10 values of time: \\n {g.time_var[0:10]}') print(f'\\nFirst 10 values of data: \\n {g.data[0:10]}') If you choose to plot you can see acquired data on screen, i.e: Data will also be saved as depicted below:","title":"Arduino"},{"location":"get_data_arduino/#data-acquisition-with-arduino","text":"NOTE 1 : before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device NOTE 2 To acquire/send data with arduino, the code provided here (located at arduino_code ) should be uploaded in Arduino first. Default input port is A0 and this port can be changed in the above mentioned code. NOTE 3 PYDAQ is programmed to use 10 bits as a ADC resolution, and 0V and 5V as the input range. To change this, the user can alter the following variables: self.arduino_ai_bits = 10 self.ard_ai_max = 5 self.ard_ai_min = 0","title":"Data Acquisition with Arduino"},{"location":"get_data_arduino/#data-acquitition-using-graphical-user-interface-gui","text":"Using GUI to acquire data is really straighforward and require only three LOC (lines of code): from pydaq.get_data import Get_data # Class Get_data g = Get_data() # Method get_data_arduino g.get_data_arduino_gui() After this command, the following screen will show up, where the user is able to define parameters and start to acquire data. The user is now able to select desired device, sample period and session duration. Also, the user will define if the data will or not be plotted and saved, as well as the path to save data.","title":"Data Acquitition using Graphical User Interface (GUI)"},{"location":"get_data_arduino/#data-acquitition-using-command-line","text":"It will be presented how to use Get_data (and get_data_arduino) to acquire signal using an Arduino board. Firstly, import library and define parameters: # Importing PYDAQ from pydaq.get_data import Get_data # Defining parameters sample_period_in_seconds = 1 session_duration_in_seconds = 10.0 com_port_arduino = 'COM3' save_data = True will_plot = True Then, instantiate a class with defined parametes and get the data # Class Get_data g = Get_data(com=com_port_arduino, ts=sample_period_in_seconds, session_duration=session_duration_in_seconds, save=save_data, plot=will_plot) # Method get_data_arduino g.get_data_arduino() NOTE : data will be saved on desktop, by default. To change the path the user can define \"g.path = Desired path\"","title":"Data Acquitition using command line"},{"location":"get_data_arduino/#presenting-acquired-data","text":"To show acquired data, type: print(f'First 10 values of time: \\n {g.time_var[0:10]}') print(f'\\nFirst 10 values of data: \\n {g.data[0:10]}') If you choose to plot you can see acquired data on screen, i.e: Data will also be saved as depicted below:","title":"Presenting acquired data"},{"location":"get_data_nidaq/","text":"Data Acquisition with NIDAQ Boards NOTE : before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device Data Acquitition using Graphical User Interface (GUI) Using GUI to acquire data is really straighforward and require only three LOC (lines of code): from pydaq.get_data import Get_data # Class Get_data g = Get_data() # Method get_data_nidaq g.get_data_nidaq_gui() After this command, the following screen will show up, where the user is able to define parameters and start to acquire data. The user is now able to select desired device, channel, terminal configuration (Differential, RSE and NRSE), sample period and session duration. Also, the user will define if the data will or not be plotted and saved, as well as the path to save data. Data Acquitition using command line It will be presented how to use Get_data (and get_data_nidaq) to acquire signal using a National Instruments board. Firstly, import library and define parameters: # Importing PYDAQ from pydaq.get_data import Get_data # Defining parameters device_name = \"Dev1\" channel_used = \"ai0\" terminal_configuration = 'Diff' sample_period_in_seconds = 1 session_duration_in_seconds = 10.0 save_data = True will_plot = True Then, instantiate a class with defined parametes and get the data # Class Get_data g = Get_data(device=device_name, channel=channel_used, terminal=terminal_configuration, ts = sample_period_in_seconds, session_duration=session_duration_in_seconds, save=save_data, plot=will_plot) # Method get_data_nidaq g.get_data_nidaq() NOTE : data will be saved on desktop, by default. To change the path the user can define \"g.path = Desired path\" Presenting acquired data To show acquired data, type: print(f'First 10 values of time: \\n {g.time_var[0:10]}') print(f'\\nFirst 10 values of data: \\n {g.data[0:10]}') If you choose to plot you can see acquired data on screen, i.e: Data will also be saved as depicted below:","title":"NIDAQ"},{"location":"get_data_nidaq/#data-acquisition-with-nidaq-boards","text":"NOTE : before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device","title":"Data Acquisition with NIDAQ Boards"},{"location":"get_data_nidaq/#data-acquitition-using-graphical-user-interface-gui","text":"Using GUI to acquire data is really straighforward and require only three LOC (lines of code): from pydaq.get_data import Get_data # Class Get_data g = Get_data() # Method get_data_nidaq g.get_data_nidaq_gui() After this command, the following screen will show up, where the user is able to define parameters and start to acquire data. The user is now able to select desired device, channel, terminal configuration (Differential, RSE and NRSE), sample period and session duration. Also, the user will define if the data will or not be plotted and saved, as well as the path to save data.","title":"Data Acquitition using Graphical User Interface (GUI)"},{"location":"get_data_nidaq/#data-acquitition-using-command-line","text":"It will be presented how to use Get_data (and get_data_nidaq) to acquire signal using a National Instruments board. Firstly, import library and define parameters: # Importing PYDAQ from pydaq.get_data import Get_data # Defining parameters device_name = \"Dev1\" channel_used = \"ai0\" terminal_configuration = 'Diff' sample_period_in_seconds = 1 session_duration_in_seconds = 10.0 save_data = True will_plot = True Then, instantiate a class with defined parametes and get the data # Class Get_data g = Get_data(device=device_name, channel=channel_used, terminal=terminal_configuration, ts = sample_period_in_seconds, session_duration=session_duration_in_seconds, save=save_data, plot=will_plot) # Method get_data_nidaq g.get_data_nidaq() NOTE : data will be saved on desktop, by default. To change the path the user can define \"g.path = Desired path\"","title":"Data Acquitition using command line"},{"location":"get_data_nidaq/#presenting-acquired-data","text":"To show acquired data, type: print(f'First 10 values of time: \\n {g.time_var[0:10]}') print(f'\\nFirst 10 values of data: \\n {g.data[0:10]}') If you choose to plot you can see acquired data on screen, i.e: Data will also be saved as depicted below:","title":"Presenting acquired data"},{"location":"jupyter_notebooks/","text":"Jupyter Notebooks A full set of jupyter notebooks with several examples of how to use NIDAQ and Arduino for data acquisition, send data and other experiments can be found on Github repository .","title":"Jupyter Notebooks"},{"location":"jupyter_notebooks/#jupyter-notebooks","text":"A full set of jupyter notebooks with several examples of how to use NIDAQ and Arduino for data acquisition, send data and other experiments can be found on Github repository .","title":"Jupyter Notebooks"},{"location":"send_data_arduino/","text":"Sending Data with Arduino Boards NOTE 1 : before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device NOTE 2 : To acquire/send data with arduino, the code provided here (located at arduino_code ) should be uploaded in Arduino first. Default output port is 13 and this port can be changed in the above mentioned code. This code only works with digital output, since this is a limitation of Arduino Boards. NOTE 3 : Since are used digital output ports, the output will be 0V if data < 2.5 and 5V otherwise. Sending Data using Graphical User Interface (GUI) Using GUI to send data is really straighforward and require only three LOC (lines of code): from pydaq.send_data import Send_data # Class Send_data s = Send_data() # Method send_data_arduino_gui s.send_data_arduino_gui() After this command, the following screen will show up, where the user is able to define parameters and start to acquire data. The user is now able to select desired Arduino and sample period. Also, the user will define if the data will or not be plotted. The data that will be sent should be in the range (0-5V). Data should be formated as one data per line and saved as a .dat file. After configuration is done, the user only need to click on SEND DATA button to start the process. Sending data using command line It will be presented how to use Send_data (and send_data_arduino) to send a signal using an Arduino board. Firstly, import library and define parameters: # Importing PYDAQ from pydaq.send_data import Send_data # Defining parameters sample_period_in_seconds = 1 data = [0,0,5,5,0,0,5,5,0,0,5,5] # It can be either a list or a numpy array com_port_arduino = 'COM3' will_plot = True Then, instantiate a class with defined parametes and send the data # Class Send_data s = Send_data(data = data, com = com_port_arduino, ts = sample_period_in_seconds) # Method send_data_arduino() s.send_data_arduino() If you choose to plot you can see the data sent on screen, i.e:","title":"Arduino"},{"location":"send_data_arduino/#sending-data-with-arduino-boards","text":"NOTE 1 : before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device NOTE 2 : To acquire/send data with arduino, the code provided here (located at arduino_code ) should be uploaded in Arduino first. Default output port is 13 and this port can be changed in the above mentioned code. This code only works with digital output, since this is a limitation of Arduino Boards. NOTE 3 : Since are used digital output ports, the output will be 0V if data < 2.5 and 5V otherwise.","title":"Sending Data with Arduino Boards"},{"location":"send_data_arduino/#sending-data-using-graphical-user-interface-gui","text":"Using GUI to send data is really straighforward and require only three LOC (lines of code): from pydaq.send_data import Send_data # Class Send_data s = Send_data() # Method send_data_arduino_gui s.send_data_arduino_gui() After this command, the following screen will show up, where the user is able to define parameters and start to acquire data. The user is now able to select desired Arduino and sample period. Also, the user will define if the data will or not be plotted. The data that will be sent should be in the range (0-5V). Data should be formated as one data per line and saved as a .dat file. After configuration is done, the user only need to click on SEND DATA button to start the process.","title":"Sending Data using Graphical User Interface (GUI)"},{"location":"send_data_arduino/#sending-data-using-command-line","text":"It will be presented how to use Send_data (and send_data_arduino) to send a signal using an Arduino board. Firstly, import library and define parameters: # Importing PYDAQ from pydaq.send_data import Send_data # Defining parameters sample_period_in_seconds = 1 data = [0,0,5,5,0,0,5,5,0,0,5,5] # It can be either a list or a numpy array com_port_arduino = 'COM3' will_plot = True Then, instantiate a class with defined parametes and send the data # Class Send_data s = Send_data(data = data, com = com_port_arduino, ts = sample_period_in_seconds) # Method send_data_arduino() s.send_data_arduino() If you choose to plot you can see the data sent on screen, i.e:","title":"Sending data using command line"},{"location":"send_data_nidaq/","text":"Sending Data with NIDAQ Boards NOTE : before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device Sending Data using Graphical User Interface (GUI) Using GUI to send data is really straighforward and require only three LOC (lines of code): from pydaq.send_data import Send_data # Class Send_data s = Send_data() # Method send_data_nidaq_gui s.send_data_nidaq_gui() After this command, the following screen will show up, where the user is able to define parameters and start to acquire data. The user is now able to select desired device, analog output channel and sample period. Also, the user will define if the data will or not be plotted. The data that will be sent should be in the output range defined, formated as one data per line and saved as a .dat file. After configuration is done, the user only need to click on SEND DATA button to start the process. Sending data using command line It will be presented how to use Send_data (and send_data_nidaq) to send a signal using a National Instruments board. Firstly, import library and define parameters: # Importing PYDAQ from pydaq.send_data import Send_data # Defining parameters device_name = \"Dev1\" channel_used = \"ao0\" sample_period_in_seconds = 1 data = [1,2,3,4,1,2,3,4,1,2,3,4] # It can be either a list or a numpy array ao_min = 0 # Minimum allowed analog output value ao_max = 5 # Maximum allowed analog output value will_plot = True Then, instantiate a class with defined parametes and send the data # Class Get_data s = Send_data(data = data, device=device_name, channel= channel_used, ts=sample_period_in_seconds, ao_min= ao_min, ao_max=ao_max, plot=will_plot) # Method send_data_nidaq s.send_data_nidaq() If you choose to plot you can see the data sent on screen, i.e:","title":"NIDAQ"},{"location":"send_data_nidaq/#sending-data-with-nidaq-boards","text":"NOTE : before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device","title":"Sending Data with NIDAQ Boards"},{"location":"send_data_nidaq/#sending-data-using-graphical-user-interface-gui","text":"Using GUI to send data is really straighforward and require only three LOC (lines of code): from pydaq.send_data import Send_data # Class Send_data s = Send_data() # Method send_data_nidaq_gui s.send_data_nidaq_gui() After this command, the following screen will show up, where the user is able to define parameters and start to acquire data. The user is now able to select desired device, analog output channel and sample period. Also, the user will define if the data will or not be plotted. The data that will be sent should be in the output range defined, formated as one data per line and saved as a .dat file. After configuration is done, the user only need to click on SEND DATA button to start the process.","title":"Sending Data using Graphical User Interface (GUI)"},{"location":"send_data_nidaq/#sending-data-using-command-line","text":"It will be presented how to use Send_data (and send_data_nidaq) to send a signal using a National Instruments board. Firstly, import library and define parameters: # Importing PYDAQ from pydaq.send_data import Send_data # Defining parameters device_name = \"Dev1\" channel_used = \"ao0\" sample_period_in_seconds = 1 data = [1,2,3,4,1,2,3,4,1,2,3,4] # It can be either a list or a numpy array ao_min = 0 # Minimum allowed analog output value ao_max = 5 # Maximum allowed analog output value will_plot = True Then, instantiate a class with defined parametes and send the data # Class Get_data s = Send_data(data = data, device=device_name, channel= channel_used, ts=sample_period_in_seconds, ao_min= ao_min, ao_max=ao_max, plot=will_plot) # Method send_data_nidaq s.send_data_nidaq() If you choose to plot you can see the data sent on screen, i.e:","title":"Sending data using command line"},{"location":"step_response_arduino/","text":"Step response with Arduino boards NOTE 1 : before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device NOTE 2 : To acquire/send data with arduino, the code provided here (located at arduino_code ) should be uploaded in Arduino first. Default output port is 13 and analog input is A0 and these ports can be changed in the above-mentioned code. This code only works with digital output, since this is a limitation of Arduino Boards. NOTE 3 : Since are used digital output ports, the output will be 0V for step minimum and 5V for step maximum. Step Response using Graphical User Interface (GUI) Using GUI for step response is really straighforward and require only three LOC (lines of code): from pydaq.step_response import Step_response # Class Step_Response s = Step_response() # Method step_response_arduino_gui s.step_response_arduino_gui() After this command, the following screen will show up, where the user is able to define parameters and start to acquire data. The user is now able to select desired Arduino and sample period, as well as the session duration and the time when the step will be on. Also, the user will define if the data will or not be plotted and saved. Step Response using command line It will be presented how to use Step_response (and step_response_arduino) to perform a step response experiment using an Arduino board. Firstly, import library and define parameters: # Importing PYDAQ from pydaq.step_response import Step_response # Defining parameters sample_period_in_seconds = 1 session_duration_in_seconds = 10.0 step_time_in_seconds = 3.0 com_port_arduino = 'COM3' will_plot = True Then, instantiate a class with defined parametes and send the data # Class Get_data s = Step_response(com = com_port_arduino, ts=sample_period_in_seconds, session_duration=session_duration_in_seconds, step_time=step_time_in_seconds, plot=will_plot ) # Method step_response_arduino s.step_response_arduino() If you choose to plot you can see the data sent on screen, i.e:","title":"Arduino"},{"location":"step_response_arduino/#step-response-with-arduino-boards","text":"NOTE 1 : before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device NOTE 2 : To acquire/send data with arduino, the code provided here (located at arduino_code ) should be uploaded in Arduino first. Default output port is 13 and analog input is A0 and these ports can be changed in the above-mentioned code. This code only works with digital output, since this is a limitation of Arduino Boards. NOTE 3 : Since are used digital output ports, the output will be 0V for step minimum and 5V for step maximum.","title":"Step response with Arduino boards"},{"location":"step_response_arduino/#step-response-using-graphical-user-interface-gui","text":"Using GUI for step response is really straighforward and require only three LOC (lines of code): from pydaq.step_response import Step_response # Class Step_Response s = Step_response() # Method step_response_arduino_gui s.step_response_arduino_gui() After this command, the following screen will show up, where the user is able to define parameters and start to acquire data. The user is now able to select desired Arduino and sample period, as well as the session duration and the time when the step will be on. Also, the user will define if the data will or not be plotted and saved.","title":"Step Response using Graphical User Interface (GUI)"},{"location":"step_response_arduino/#step-response-using-command-line","text":"It will be presented how to use Step_response (and step_response_arduino) to perform a step response experiment using an Arduino board. Firstly, import library and define parameters: # Importing PYDAQ from pydaq.step_response import Step_response # Defining parameters sample_period_in_seconds = 1 session_duration_in_seconds = 10.0 step_time_in_seconds = 3.0 com_port_arduino = 'COM3' will_plot = True Then, instantiate a class with defined parametes and send the data # Class Get_data s = Step_response(com = com_port_arduino, ts=sample_period_in_seconds, session_duration=session_duration_in_seconds, step_time=step_time_in_seconds, plot=will_plot ) # Method step_response_arduino s.step_response_arduino() If you choose to plot you can see the data sent on screen, i.e:","title":"Step Response using command line"},{"location":"step_response_nidaq/","text":"Step response with NIDAQ boards NOTE 1 : before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device Step Response using Graphical User Interface (GUI) Using GUI for step response is really straighforward and require only three LOC (lines of code): from pydaq.step_response import Step_response # Class Step_Response s = Step_response() # Method step_response_nidaq_gui s.step_response_nidaq_gui() After this command, the following screen will show up, where the user is able to define parameters and start to acquire data. The user is now able to select desired NIDAQ device, analog input and analog output channel, as well as analog input terminal configuration. Step range and sample period can be adjusted along with session duration. Step will be applied in the defined time. Also, the user will define if the data will or not be plotted and saved. Step Response using command line It will be presented how to use Step_response (and step_response_nidaq) to perform a step response experiment using an NIDAQ board. Firstly, import library and define parameters: # Importing PYDAQ from pydaq.step_response import Step_response # Defining parameters device_name = \"Dev1\" ao_channel_used = \"ao0\" ai_channel_used = \"ai0\" sample_period_in_seconds = 1 session_duration_in_seconds = 10.0 step_time_in_seconds = 3.0 step_min_in_volts = 0 step_max_in_volts = 5 terminal_configuration = 'Diff' will_plot = True Then, instantiate a class with defined parametes and send the data # Class Get_data s = Step_response(device=device_name, ao_channel= ao_channel_used, ai_channel=ai_channel_used, ts=sample_period_in_seconds, session_duration=session_duration_in_seconds, step_time=step_time_in_seconds, step_min=step_min_in_volts, step_max=step_max_in_volts, terminal= terminal_configuration, plot=will_plot) # Method step_response_nidaq s.step_response_nidaq() If you choose to plot you can see the data sent on screen, i.e:","title":"NIDAQ"},{"location":"step_response_nidaq/#step-response-with-nidaq-boards","text":"NOTE 1 : before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device","title":"Step response with NIDAQ boards"},{"location":"step_response_nidaq/#step-response-using-graphical-user-interface-gui","text":"Using GUI for step response is really straighforward and require only three LOC (lines of code): from pydaq.step_response import Step_response # Class Step_Response s = Step_response() # Method step_response_nidaq_gui s.step_response_nidaq_gui() After this command, the following screen will show up, where the user is able to define parameters and start to acquire data. The user is now able to select desired NIDAQ device, analog input and analog output channel, as well as analog input terminal configuration. Step range and sample period can be adjusted along with session duration. Step will be applied in the defined time. Also, the user will define if the data will or not be plotted and saved.","title":"Step Response using Graphical User Interface (GUI)"},{"location":"step_response_nidaq/#step-response-using-command-line","text":"It will be presented how to use Step_response (and step_response_nidaq) to perform a step response experiment using an NIDAQ board. Firstly, import library and define parameters: # Importing PYDAQ from pydaq.step_response import Step_response # Defining parameters device_name = \"Dev1\" ao_channel_used = \"ao0\" ai_channel_used = \"ai0\" sample_period_in_seconds = 1 session_duration_in_seconds = 10.0 step_time_in_seconds = 3.0 step_min_in_volts = 0 step_max_in_volts = 5 terminal_configuration = 'Diff' will_plot = True Then, instantiate a class with defined parametes and send the data # Class Get_data s = Step_response(device=device_name, ao_channel= ao_channel_used, ai_channel=ai_channel_used, ts=sample_period_in_seconds, session_duration=session_duration_in_seconds, step_time=step_time_in_seconds, step_min=step_min_in_volts, step_max=step_max_in_volts, terminal= terminal_configuration, plot=will_plot) # Method step_response_nidaq s.step_response_nidaq() If you choose to plot you can see the data sent on screen, i.e:","title":"Step Response using command line"}]}